// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ParticlePos
#pragma kernel SpawnParticles

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> SpawnTex;
Texture2D<float4> SpawnColor;

RWStructuredBuffer<float4> _ParticlePosBuffer;
RWStructuredBuffer<float4> _ParticleColorBuffer;
RWStructuredBuffer<int> _AliveCounter;
int _AliveCount;


#define BLOCK_SIZE 256


//SpawnParticles uniforms
uint _ParticleCount;
float _SpawnRate;


uint _PCacheTexWidth;
bool _UseColor;
float _AspectRatio;

//ParticlePos uniforms
float _DeltaTime;
float _Time;
float _LifeTime;
float _CurlIntensity;
float _ForwardIntensity;
float _ExplodeIntensity;

#include "Assets/Shaders/Util/3dnoise.hlsl"
#include "Assets/Shaders/Util/curve.hlsl"

[numthreads(BLOCK_SIZE, 1, 1)]
void SpawnParticles(uint3 id : SV_DispatchThreadID){
    AllMemoryBarrierWithGroupSync();
    uint aliveCount = _AliveCounter[0];
    aliveCount = max(aliveCount, 0);
    AllMemoryBarrierWithGroupSync();

    uint _DeadCount = _ParticleCount - aliveCount;
    uint spawnCount = min(_DeadCount, 500);

    const uint ParticleID = id.x;
    float4 pos = _ParticlePosBuffer[ParticleID];
    if(ParticleID > aliveCount+spawnCount || pos.w > 0){return;}
    
    if(aliveCount < _ParticleCount){
        InterlockedAdd(_AliveCounter[0], 1);
    }
    

    uint y = ParticleID/_PCacheTexWidth;
    uint x = ParticleID % _PCacheTexWidth;

    pos = float4(SpawnTex[uint2(x,y)].xyz,_LifeTime);
    if(_UseColor){
        _ParticleColorBuffer[ParticleID] = SpawnColor[uint2(x,y)];
    }
    pos.x *= _AspectRatio;
    _ParticlePosBuffer[ParticleID] = pos;
}

[numthreads(BLOCK_SIZE, 1,1)]
void ParticlePos (uint3 id : SV_DispatchThreadID)
{
    AllMemoryBarrierWithGroupSync();
    uint aliveCount = _AliveCounter[0];
    AllMemoryBarrierWithGroupSync();

    const uint ParticleID = id.x;
    float4 pos = _ParticlePosBuffer[ParticleID];
    if(ParticleID > aliveCount){return;}

    float intensity = exp(-5*(1-_CurlIntensity));
    intensity = saturate(intensity) * 2. + 0.05;

    float currentIterOffset = fmod(_Time, 100) - fmod(_Time, 5);
    float3 velocity = curlC(pos.xyz + currentIterOffset) * intensity;
    velocity += _ForwardIntensity * float3(0,0, pos.z)*step(pos.z,0)*3/_LifeTime;
    velocity += _ExplodeIntensity * normalize(pos.xyz)*5;
    
    pos.w -= _DeltaTime + 1e-2*nrand(float2(_Time, id.x*1.2));
    pos.xyz += velocity * _DeltaTime;

    if(pos.w < 0 && aliveCount > 0){
        InterlockedAdd(_AliveCounter[0], -1);    
    }

    _ParticlePosBuffer[ParticleID] = pos;
}
